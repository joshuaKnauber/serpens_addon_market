{
    "version": 3,
    "name": "Render Assist",
    "func_name": "sna_render_assist_A81DC",
    "inputs": [
        {
            "idname": "SN_ExecuteSocket",
            "name": "Execute",
            "subtype": "NONE"
        },
        {
            "idname": "SN_CollectionPropertySocket",
            "name": "ObjectsCollection",
            "subtype": "NONE"
        },
        {
            "idname": "SN_StringSocket",
            "name": "AssetFileLocation",
            "subtype": "NONE"
        },
        {
            "idname": "SN_IntegerSocket",
            "name": "RenderSecond",
            "subtype": "NONE"
        },
        {
            "idname": "SN_IntegerSocket",
            "name": "ResolutionY",
            "subtype": "NONE"
        },
        {
            "idname": "SN_IntegerSocket",
            "name": "ResolutionX",
            "subtype": "NONE"
        }
    ],
    "outputs": [
        {
            "idname": "SN_ExecuteSocket",
            "name": "Execute",
            "subtype": "NONE"
        }
    ],
    "function": "def sna_render_assist_A81DC(ObjectsCollection, AssetFileLocation, RenderSecond, ResolutionY, ResolutionX):\n    sna_viewport_and_render_checker_D2910_BD26D(ObjectsCollection, True, True, True, False, False)\n    for i_1A6DE in range(len(ObjectsCollection)):\n        if (bpy.data.objects[ObjectsCollection[i_1A6DE].name].type == 'MESH'):\n            bpy.data.objects[ObjectsCollection[i_1A6DE].name].hide_viewport = False\n            bpy.data.objects[ObjectsCollection[i_1A6DE].name].hide_render = False\n            if os.path.exists(AssetFileLocation):\n                if os.path.exists(os.path.join(AssetFileLocation,'',ObjectsCollection[i_1A6DE].name + '.png')):\n                    os.remove(os.path.join(AssetFileLocation,'',ObjectsCollection[i_1A6DE].name + '.png'))\n                bpy.data.scenes['Scene'].cycles.time_limit = RenderSecond\n                bpy.data.scenes['Scene'].render.resolution_x = ResolutionX\n                bpy.data.scenes['Scene'].render.resolution_y = ResolutionY\n                bpy.context.scene.render.filepath = os.path.join(AssetFileLocation,'',ObjectsCollection[i_1A6DE].name + '.png').format()\n                bpy.ops.render.render(write_still=True, use_viewport=True)\n                bpy.data.scenes['Scene'].cycles.time_limit = 0.0\n                bpy.data.scenes['Scene'].render.resolution_x = 1920\n                bpy.data.scenes['Scene'].render.resolution_y = 1080\n                bpy.data.objects[ObjectsCollection[i_1A6DE].name].hide_render = True\n            \n    sna_viewport_and_render_checker_D2910_EF1D3(ObjectsCollection, False, False, True, False, False)\n    return",
    "import": "import bpy\nimport bpy\nimport os",
    "imperative": "def sna_viewport_and_render_checker_D2910_BD26D(ObjectsCollection, HideViewport, HideRender, Objects, Cameras, Lights):\n    OBC = ObjectsCollection\n    HideViewport = HideViewport\n    HideRender = HideRender\n    HideObject = Objects\n    HideCameras = Cameras\n    HideLights = Lights\n    counters = None\n    import time\n    # Iterate over all objects in the scene\n    for obj in OBC:\n        # Skip objects that should not be hidden\n        if obj.type == 'MESH' and not HideObject:\n            continue\n        if obj.type == 'CAMERA' and not HideCameras:\n            continue\n        if obj.type == 'LIGHT' and not HideLights:\n            continue\n        # Set the object's visibility to False\n        if HideViewport is False: obj.hide_set(False)\n        if HideRender is False: obj.hide_render= False\n        # Do something with the object\n        if HideViewport: obj.hide_set(True)\n        if HideRender: obj.hide_render = True\n    return\ndef sna_viewport_and_render_checker_D2910_EF1D3(ObjectsCollection, HideViewport, HideRender, Objects, Cameras, Lights):\n    OBC = ObjectsCollection\n    HideViewport = HideViewport\n    HideRender = HideRender\n    HideObject = Objects\n    HideCameras = Cameras\n    HideLights = Lights\n    counters = None\n    import time\n    # Iterate over all objects in the scene\n    for obj in OBC:\n        # Skip objects that should not be hidden\n        if obj.type == 'MESH' and not HideObject:\n            continue\n        if obj.type == 'CAMERA' and not HideCameras:\n            continue\n        if obj.type == 'LIGHT' and not HideLights:\n            continue\n        # Set the object's visibility to False\n        if HideViewport is False: obj.hide_set(False)\n        if HideRender is False: obj.hide_render= False\n        # Do something with the object\n        if HideViewport: obj.hide_set(True)\n        if HideRender: obj.hide_render = True\n    return",
    "register": "",
    "unregister": "",
    "variables": [],
    "properties": [],
    "variable_defs": {},
    "properties_defs": {}
}